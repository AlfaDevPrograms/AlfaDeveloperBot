import telebot
from telebot import types

from User import User

bot = telebot.TeleBot("7568756895:AAEqpyqUH0e9q26VD401ZELgZqMeCZuL_hM")

users = list()


# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands = ["start"])
def start_bot(message):
	markup = types.InlineKeyboardMarkup()
	button_register = types.InlineKeyboardButton(text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data = "register")
	markup.add(button_register)
	bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! ü§ó", reply_markup = markup)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func = lambda call: call.data == "register")
def register_user(call):
	# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏
	bot.delete_message(call.message.chat.id, call.message.message_id)
	user_id = call.from_user.id
	if_exist = [user for user in users if user.id_user == int(user_id)]
	if if_exist:
		markup = types.InlineKeyboardMarkup()
		button_match = types.InlineKeyboardButton(text = "–ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data = "match")
		markup.add(button_match)
		bot.send_message(call.message.chat.id,
		                 "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.",
		                 reply_markup = markup)
		return
	else:
		users.append(User(id_user = int(user_id)))
	bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–±–µ—Ä–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–±–µ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", )
	bot.register_next_step_handler(call.message, process_name)


def process_name(message):
	user_id = message.from_user.id
	name = message.text
	if_exist = [user for user in users if user.id_user == int(user_id)][0]
	id_in_list = users.index(if_exist)
	users[id_in_list] = User(int(user_id), name, message.from_user.username)
	bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
	bot.register_next_step_handler(message, process_age)


def process_age(message):
	user_id = message.from_user.id
	age = message.text
	if_exist = [user for user in users if user.id_user == int(user_id)][0]
	id_in_list = users.index(if_exist)
	try:
		users[id_in_list].age = int(age)
		bot.send_message(message.chat.id, "–ö–∞–∫–æ–≤—ã –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–æ—Ä—Ç, –º—É–∑—ã–∫–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)\n"
		                                  "–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
		bot.register_next_step_handler(message, process_interests)
	except ValueError:
		bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		bot.register_next_step_handler(message, process_age)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏


def process_interests(message):
	user_id = message.from_user.id
	interests = message.text
	if_exist = [user for user in users if user.id_user == int(user_id)][0]
	id_in_list = users.index(if_exist)
	interests_list = str(interests).split(',')
	interests_list = [s.strip().lower() for s in interests_list]
	users[id_in_list].interest = interests_list
	interests_view = ""
	for item in interests_list:
		interests_view += item + ", "
	interests_view = interests_view[:-2] + '.'
	registration_message = (f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n"
	                        f"–ò–º—è: {users[id_in_list].name}\n"
	                        f"–í–æ–∑—Ä–∞—Å—Ç: {users[id_in_list].age}\n"
	                        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_view}\n")
	markup = types.InlineKeyboardMarkup()
	button_match = types.InlineKeyboardButton(text = "–ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data = "match")
	markup.add(button_match)
	bot.send_message(message.chat.id, registration_message, reply_markup = markup)


# –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
@bot.callback_query_handler(func = lambda call: call.data == "match")
def find_matches(call):
	user_id = call.from_user.id
	if len(users) == 0:
		return
	if_exist = [user for user in users if user.id_user == int(user_id)][0]
	id_in_list = users.index(if_exist)
	user = users[id_in_list]
	if not user:
		bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", )
		return
	match_info = ""
	set1 = set(user.interest)
	# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤—ã –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
	if user.count >= len(users) or (user.count == users.index(user) and users.index(user) == len(users) - 1):
		user.count = 0
	for i in range(user.count, len(users)):
		user.count = i + 1
		if user != users[i]:
			set2 = set(users[i].interest)
			common_elements = set1.intersection(set2)
			count = len(common_elements)
			if count > 0:
				interests_view = ""
				for item in users[i].interest:
					interests_view += item + ", "
				interests_view = interests_view[:-2] + '.'
				match_info = (f"–ò–º—è: {users[i].name}\n–í–æ–∑—Ä–∞—Å—Ç: {users[i].age}\n"
				              f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_view}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: @{users[i].username}")
				break
	markup = types.InlineKeyboardMarkup()
	button_match = types.InlineKeyboardButton(text = "–ò—Å–∫–∞—Ç—å", callback_data = "match")
	markup.add(button_match)
	if match_info != "":
		bot.send_message(call.message.chat.id, f"–í–æ—Ç –≤–∞—à–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: \n{match_info}", reply_markup = markup)
	else:
		bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üôÇ",
		                 reply_markup = markup)
	bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = None)


bot.infinity_polling()
